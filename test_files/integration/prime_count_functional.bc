fn floor(x) {
    return x - (x % 1);
}

fn sqrt(n) { // homebrew sqrt function
    let mut x = 2 ^ 32;
    let mut y = 0;
    while true {
        y = floor((x + floor(n/x))/2);
        if y >= x {
            return x;
        }
        x = y;
    }
}

fn is_prime(n) {
    let sqrt_n = sqrt(n);
    for (let mut j = 2; j <= sqrt_n; j = j + 1) {
        if n % j == 0 {
            return false;
        }
    }
    return true;
}

let mut count = 0;
for (let mut n = 2; n < 100; n = n + 1) {
    if is_prime(n) {
        count = count + 1;
    }
}